{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jarryd/Documents/ActiveUni/Seasonall-NextJS-AnimeJS/pages/Weather.jsx\";\nimport Link from 'next/link';\nimport React, { useEffect, useState } from 'react';\n\nconst weather = () => {\n  // const [location, setLocation] = useState([]); //useState hook to initialize the state to an empty array\n  const {\n    0: weatherData,\n    1: setWeatherData\n  } = useState([]); //useState hook to initialize the state to an empty array\n\n  const getData = async () => {\n    const travelLat = \"34.337306\";\n    const travelLong = \"-118.6681779\";\n    const weatherDateStart = \"2020-12-01\";\n    const weatherDateEnd = \"2021-02-28\";\n    const weatherQuery = await fetch(\"https://archive-api.open-meteo.com/v1/era5?latitude=\" + travelLat + \"&longitude=\" + travelLong + \"&start_date=\" + weatherDateStart + \"&end_date=\" + weatherDateEnd + \"&timezone=auto&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,rain_sum,snowfall_sum\");\n    const weatherResponse = await weatherQuery.json();\n    console.log(weatherResponse);\n    var item = weatherResponse.daily;\n    var calcMaxTemp = item.temperature_2m_max;\n    var calcMinTemp = item.temperature_2m_min;\n    var calcRainfall = item.rain_sum;\n    var calcSnowfall = item.snowfall_sum;\n    var calcSunrise = item.sunrise;\n    var calcSunset = item.sunset;\n    var avgSunrise = calcSunrise[45].slice(-5);\n    var avgSunset = calcSunset[45].slice(-5);\n    var avgMaxTemp = calcMaxTemp.reduce((a, b) => a + b) / calcMaxTemp.length;\n    var avgMinTemp = calcMinTemp.reduce((a, b) => a + b) / calcMinTemp.length;\n    var avgRainfall = calcRainfall.reduce((a, b) => a + b) / calcRainfall.length;\n    var avgSnowfall = calcSnowfall.reduce((a, b) => a + b) / calcSnowfall.length;\n    var storeMaxTemp = avgMaxTemp.toFixed(1);\n    var storeMinTemp = avgMinTemp.toFixed(1);\n    var storeRainfall = avgRainfall.toFixed(2);\n    var storeSnowfall = avgSnowfall.toFixed(2);\n\n    const storeWeather = () => {\n      const data = [{\n        maxTemp: storeMaxTemp\n      }, {\n        minTemp: storeMinTemp\n      }, {\n        rainfall: storeRainfall\n      }, {\n        snowfall: storeSnowfall\n      }, {\n        sunrise: avgSunrise\n      }, {\n        sunset: avgSunset\n      }];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Child, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this);\n    };\n\n    console.log(storeWeather);\n    setWeatherData(storeWeather);\n    console.log(storeWeather);\n  };\n\n  const Child = ({\n    data\n  }) => {\n    console.log(data); // { name: \"John Doe\", age: 30 }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/2 m-16 xl:w-2/5 justify-center overflow-y-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-xl\",\n          children: \"test component for weather Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => getData(\"Memphis\"),\n          className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 my-4 mx-4 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n          children: \"Get Weather Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col w-full m-16 xl:w-2/5 justify-center overflow-y-hidden\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"My name is \", data.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"I am \", data.age, \" years old\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true);\n  };\n};\n\nexport default weather;\n{\n  /* {\n  weatherData && weatherData.length && Object.keys(weatherData).map(obj, i) => {\n     return (\n         <div>\n             id is: {weatherData[obj].id} ;\n             name is: {weatherData[obj].name}\n         </div>\n     )\n  })\n  } */\n}\n{\n  /* {\n  weatherData && weatherData.length && weatherData.map((weatherData) => <li>{weatherData}</li>)\n      return(\n         <div key={i}>\n         <h4 id=\"maxTemp\">Max Temp = <span className='font-bold'>{weatherData.maxTemp}</span></h4>\n         <h4 id=\"minTemp\">Min Temp = <span className='font-bold'>{weatherData.minTemp}</span></h4>\n         <h4 id=\"rainfall\">Rainfall = <span className='font-bold'>{weatherData.rainfall}</span></h4>\n         <h4 id=\"snowfall\">Snowfall = <span className='font-bold'>{weatherData.snowfall}</span></h4>\n         <h4 id=\"sunrise\">Sunrise = <span className='font-bold'>{weatherData.sunrise}</span></h4>\n         <h4 id=\"sunset\">Sunset = <span className='font-bold'>{weatherData.sunset}</span></h4>\n         </div>\n     )})\n    \n  } */\n}","map":{"version":3,"sources":["/Users/jarryd/Documents/ActiveUni/Seasonall-NextJS-AnimeJS/pages/Weather.jsx"],"names":["Link","React","useEffect","useState","weather","weatherData","setWeatherData","getData","travelLat","travelLong","weatherDateStart","weatherDateEnd","weatherQuery","fetch","weatherResponse","json","console","log","item","daily","calcMaxTemp","temperature_2m_max","calcMinTemp","temperature_2m_min","calcRainfall","rain_sum","calcSnowfall","snowfall_sum","calcSunrise","sunrise","calcSunset","sunset","avgSunrise","slice","avgSunset","avgMaxTemp","reduce","a","b","length","avgMinTemp","avgRainfall","avgSnowfall","storeMaxTemp","toFixed","storeMinTemp","storeRainfall","storeSnowfall","storeWeather","data","maxTemp","minTemp","rainfall","snowfall","Child","name","age"],"mappings":"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","sourcesContent":["import Link from 'next/link';\nimport React, { useEffect, useState } from 'react';\n\n\nconst weather = () => {\n\n  // const [location, setLocation] = useState([]); //useState hook to initialize the state to an empty array\n  const [weatherData, setWeatherData] = useState([]); //useState hook to initialize the state to an empty array\n  \n    const getData = async () => {\n      const travelLat = \"34.337306\";\n      const travelLong = \"-118.6681779\";\n      const weatherDateStart = \"2020-12-01\";\n      const weatherDateEnd = \"2021-02-28\";\n\n      const weatherQuery = await fetch(\"https://archive-api.open-meteo.com/v1/era5?latitude=\" +\n      travelLat +\n      \"&longitude=\" +\n      travelLong +\n      \"&start_date=\" +\n      weatherDateStart +\n      \"&end_date=\" +\n      weatherDateEnd +\n      \"&timezone=auto&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,rain_sum,snowfall_sum\"\n      );\n      const weatherResponse = await weatherQuery.json();\n      console.log(weatherResponse);\n\n\n      var item = weatherResponse.daily;\n          \n      var calcMaxTemp = item.temperature_2m_max;\n      var calcMinTemp = item.temperature_2m_min;\n      var calcRainfall = item.rain_sum;\n      var calcSnowfall = item.snowfall_sum;\n      var calcSunrise = item.sunrise;\n      var calcSunset = item.sunset;\n\n      var avgSunrise = calcSunrise[45].slice(-5);\n      var avgSunset = calcSunset[45].slice(-5);\n      var avgMaxTemp = calcMaxTemp.reduce((a, b) => a + b) / calcMaxTemp.length;\n      var avgMinTemp = calcMinTemp.reduce((a, b) => a + b) / calcMinTemp.length;\n      var avgRainfall = calcRainfall.reduce((a, b) => a + b) / calcRainfall.length;\n      var avgSnowfall = calcSnowfall.reduce((a, b) => a + b) / calcSnowfall.length;\n      \n      var storeMaxTemp = avgMaxTemp.toFixed(1);\n      var storeMinTemp = avgMinTemp.toFixed(1);\n      var storeRainfall = avgRainfall.toFixed(2);\n      var storeSnowfall = avgSnowfall.toFixed(2);\n      \n        const storeWeather = () => {\n        const data = [\n        {maxTemp: storeMaxTemp}, \n        {minTemp: storeMinTemp}, \n        {rainfall: storeRainfall}, \n        {snowfall: storeSnowfall}, \n        {sunrise: avgSunrise}, \n        {sunset: avgSunset},\n        ];\n        return (\n            <div>\n              <Child data={data} />\n            </div>\n          );\n        };\n      \n        console.log(storeWeather);\n        setWeatherData(storeWeather);\n      console.log(storeWeather);\n\n    \n    };\n    \n    const Child = ({ data }) => {\n    console.log(data); // { name: \"John Doe\", age: 30 }\n\n  return(\n    <>\n    <div className=\"w-1/2 m-16 xl:w-2/5 justify-center overflow-y-hidden\">\n      <h1 className=\"text-xl\">test component for weather Data</h1>\n\n      <button onClick={() => getData(\"Memphis\")}      \n      className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 my-4 mx-4 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\">\n        Get Weather Data\n      </button>\n    </div>\n\n  <div className=\"flex flex-col w-full m-16 xl:w-2/5 justify-center overflow-y-hidden\">\n    \n      \n       \n            <div>\n            <h1>My name is {data.name}</h1>\n            <h2>I am {data.age} years old</h2>\n            </div>\n\n   \n\n\n\n\n\n  </div>\n\n    </>\n  )\n};\n};\n\n  export default weather;\n\n    {/* {\n    weatherData && weatherData.length && Object.keys(weatherData).map(obj, i) => {\n        return (\n            <div>\n                id is: {weatherData[obj].id} ;\n                name is: {weatherData[obj].name}\n            </div>\n        )\n    })\n} */}\n    \n\n\n    {/* {\n    weatherData && weatherData.length && weatherData.map((weatherData) => <li>{weatherData}</li>)\n\n        return(\n            <div key={i}>\n            <h4 id=\"maxTemp\">Max Temp = <span className='font-bold'>{weatherData.maxTemp}</span></h4>\n            <h4 id=\"minTemp\">Min Temp = <span className='font-bold'>{weatherData.minTemp}</span></h4>\n            <h4 id=\"rainfall\">Rainfall = <span className='font-bold'>{weatherData.rainfall}</span></h4>\n            <h4 id=\"snowfall\">Snowfall = <span className='font-bold'>{weatherData.snowfall}</span></h4>\n            <h4 id=\"sunrise\">Sunrise = <span className='font-bold'>{weatherData.sunrise}</span></h4>\n            <h4 id=\"sunset\">Sunset = <span className='font-bold'>{weatherData.sunset}</span></h4>\n            </div>\n        )})\n       \n    } */}"]},"metadata":{},"sourceType":"module"}