{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jarryd/Documents/ActiveUni/Seasonall-NextJS-AnimeJS/pages/Weather.jsx\";\nimport React, { useEffect, useState } from 'react';\n\nconst weather = () => {\n  // const [location, setLocation] = useState([]); //useState hook to initialize the state to an empty array\n  const {\n    0: avgSunrise,\n    1: setSunrise\n  } = useState([]);\n  const {\n    0: avgSunset,\n    1: setSunset\n  } = useState([]);\n  const {\n    0: storeMaxTemp,\n    1: setMaxTemp\n  } = useState([]);\n  const {\n    0: storeMinTemp,\n    1: setMinTem\n  } = useState([]);\n  const {\n    0: storeRainfall,\n    1: setRainfall\n  } = useState([]);\n  const {\n    0: storeSnowfall,\n    1: setstoreSnowfall\n  } = useState([]);\n\n  const getData = async () => {\n    const travelLat = \"34.337306\";\n    const travelLong = \"-118.6681779\";\n    const weatherDateStart = \"2020-12-01\";\n    const weatherDateEnd = \"2021-02-28\";\n    const weatherQuery = await fetch(\"https://archive-api.open-meteo.com/v1/era5?latitude=\" + travelLat + \"&longitude=\" + travelLong + \"&start_date=\" + weatherDateStart + \"&end_date=\" + weatherDateEnd + \"&timezone=auto&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,rain_sum,snowfall_sum\");\n    const weatherResponse = await weatherQuery.json();\n    console.log(\"This is weather Response\");\n    console.log(weatherResponse);\n    var item = weatherResponse.daily;\n    var calcMaxTemp = item.temperature_2m_max;\n    var calcMinTemp = item.temperature_2m_min;\n    var calcRainfall = item.rain_sum;\n    var calcSnowfall = item.snowfall_sum;\n    var calcSunrise = item.sunrise;\n    var calcSunset = item.sunset;\n    var avgMaxTemp = calcMaxTemp.reduce((a, b) => a + b) / calcMaxTemp.length;\n    var avgMinTemp = calcMinTemp.reduce((a, b) => a + b) / calcMinTemp.length;\n    var avgRainfall = calcRainfall.reduce((a, b) => a + b) / calcRainfall.length;\n    var avgSnowfall = calcSnowfall.reduce((a, b) => a + b) / calcSnowfall.length;\n    const avgSunrise = calcSunrise[45].slice(-5);\n    const avgSunset = calcSunset[45].slice(-5);\n    const storeMaxTemp = avgMaxTemp.toFixed(1);\n    const storeMinTemp = avgMinTemp.toFixed(1);\n    const storeRainfall = avgRainfall.toFixed(2);\n    const storeSnowfall = avgSnowfall.toFixed(2);\n    setSunrise(avgSunrise);\n    setSunset(avgSunset);\n    setMaxTemp(storeMaxTemp);\n    setMinTem(storeMinTemp);\n    setRainfall(storeRainfall);\n    setstoreSnowfall(storeSnowfall);\n    console.log(avgSunrise);\n    console.log(avgSunset);\n    console.log(storeMaxTemp);\n    console.log(storeMinTemp);\n    console.log(storeRainfall);\n    console.log(storeSnowfall);\n    const weatherResult = [storeMaxTemp, storeMinTemp, storeRainfall, storeSnowfall, avgSunrise, avgSunset];\n    setWeatherData([weatherResult]);\n    console.log(\"this is the weatherData\");\n    console.log(weatherData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/2 m-16 xl:w-2/5 justify-center overflow-y-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl\",\n        children: \"test component for weather Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getData(\"Memphis\"),\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 my-4 mx-4 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        children: \"Get Weather Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\nexport default weather;","map":{"version":3,"sources":["/Users/jarryd/Documents/ActiveUni/Seasonall-NextJS-AnimeJS/pages/Weather.jsx"],"names":["React","useEffect","useState","weather","avgSunrise","setSunrise","avgSunset","setSunset","storeMaxTemp","setMaxTemp","storeMinTemp","setMinTem","storeRainfall","setRainfall","storeSnowfall","setstoreSnowfall","getData","travelLat","travelLong","weatherDateStart","weatherDateEnd","weatherQuery","fetch","weatherResponse","json","console","log","item","daily","calcMaxTemp","temperature_2m_max","calcMinTemp","temperature_2m_min","calcRainfall","rain_sum","calcSnowfall","snowfall_sum","calcSunrise","sunrise","calcSunset","sunset","avgMaxTemp","reduce","a","b","length","avgMinTemp","avgRainfall","avgSnowfall","slice","toFixed","weatherResult","setWeatherData","weatherData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\n\nconst weather = () => {\n\n  // const [location, setLocation] = useState([]); //useState hook to initialize the state to an empty array\n  const [avgSunrise, setSunrise] = useState([]);\n  const [avgSunset, setSunset] = useState([]);\n  const [storeMaxTemp, setMaxTemp] = useState([]);\n  const [storeMinTemp, setMinTem] = useState([]);\n  const [storeRainfall, setRainfall] = useState([]);\n  const [storeSnowfall, setstoreSnowfall] = useState([]);\n  \n  const getData = async () => {\n    const travelLat = \"34.337306\";\n    const travelLong = \"-118.6681779\";\n    const weatherDateStart = \"2020-12-01\";\n    const weatherDateEnd = \"2021-02-28\";\n\n    const weatherQuery = await fetch(\"https://archive-api.open-meteo.com/v1/era5?latitude=\" +\n    travelLat +\n    \"&longitude=\" +\n    travelLong +\n    \"&start_date=\" +\n    weatherDateStart +\n    \"&end_date=\" +\n    weatherDateEnd +\n    \"&timezone=auto&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,rain_sum,snowfall_sum\"\n    );\n    const weatherResponse = await weatherQuery.json();\n    console.log(\"This is weather Response\");\n    console.log(weatherResponse);\n\n    var item = weatherResponse.daily;\n        \n    var calcMaxTemp = item.temperature_2m_max;\n    var calcMinTemp = item.temperature_2m_min;\n    var calcRainfall = item.rain_sum;\n    var calcSnowfall = item.snowfall_sum;\n    var calcSunrise = item.sunrise;\n    var calcSunset = item.sunset;\n\n\n    var avgMaxTemp = calcMaxTemp.reduce((a, b) => a + b) / calcMaxTemp.length;\n    var avgMinTemp = calcMinTemp.reduce((a, b) => a + b) / calcMinTemp.length;\n    var avgRainfall = calcRainfall.reduce((a, b) => a + b) / calcRainfall.length;\n    var avgSnowfall = calcSnowfall.reduce((a, b) => a + b) / calcSnowfall.length;\n\n\n    const avgSunrise = calcSunrise[45].slice(-5);\n    const avgSunset = calcSunset[45].slice(-5);\n    const storeMaxTemp = avgMaxTemp.toFixed(1);\n    const storeMinTemp = avgMinTemp.toFixed(1);\n    const storeRainfall = avgRainfall.toFixed(2);\n    const storeSnowfall = avgSnowfall.toFixed(2);\n\n    setSunrise(avgSunrise)\n    setSunset(avgSunset)\n    setMaxTemp(storeMaxTemp)\n    setMinTem(storeMinTemp)\n    setRainfall(storeRainfall)\n    setstoreSnowfall(storeSnowfall)\n  \n    console.log(avgSunrise);\n    console.log(avgSunset);\n    console.log(storeMaxTemp);\n    console.log(storeMinTemp);\n    console.log(storeRainfall);\n    console.log(storeSnowfall);\n    \n\n    const weatherResult = [storeMaxTemp, storeMinTemp, storeRainfall, storeSnowfall, avgSunrise, avgSunset];\n      setWeatherData([weatherResult]);\n        console.log(\"this is the weatherData\");\n        console.log(weatherData);\n    };\n  \n  return(\n    <>\n    <div className=\"w-1/2 m-16 xl:w-2/5 justify-center overflow-y-hidden\">\n      <h1 className=\"text-xl\">test component for weather Data</h1>\n\n      <button onClick={() => getData(\"Memphis\")}      \n      className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 my-4 mx-4 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\">\n        Get Weather Data\n      </button>\n    </div>\n\n  {/* <div className=\"flex flex-col w-full m-16 xl:w-2/5 justify-center overflow-y-hidden\">\n    \n\n            <h4 id=\"maxTemp\">Max Temp = <span className='font-bold'>{weatherData.maxTemp}</span></h4>\n            <h4 id=\"minTemp\">Min Temp = <span className='font-bold'>{weatherData.minTemp}</span></h4>\n            <h4 id=\"rainfall\">Rainfall = <span className='font-bold'>{weatherData.rainfall}</span></h4>\n            <h4 id=\"snowfall\">Snowfall = <span className='font-bold'>{weatherData.snowfall}</span></h4>\n            <h4 id=\"sunrise\">Sunrise = <span className='font-bold'>{weatherData.sunrise}</span></h4>\n            <h4 id=\"sunset\">Sunset = <span className='font-bold'>{weatherData.sunset}</span></h4>\n    \n// This part doesnt work yet...\n\n  </div> */}\n\n    </>\n  )\n};\n\n  export default weather;"]},"metadata":{},"sourceType":"module"}